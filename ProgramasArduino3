/*WRO2022-FUTURES ENGINEERS: "COCHE AUTÓNOMO": WALL FOLLOWER
   CHASIS TAMIYA TL-01 O BYCMO 1
   1 MOTOR DE PROPULSIÓN. TRACCIÓN 4X4. DIFERENCIALES DELANTE Y DETRÁS.SUSPENSIONES Y AMORTIGUADORES
   1 SERVO DE DIRECCIÓN
   MOTOR CONTROLADO POR CHIP L293 O L298
   SENSORES UTILIZADOS:
   - ULTRASÓNICOS
   - CAMARAS DE DETECCIÓN DE OBJETOS ALTA SENSIBILIDAD
  SE TRATA DE UN WALL FOLLOWER: MEDIMOS DISTANCIA Y CON EL VALOR DE LA DISTANCIA REQUERIDA CALCULAMOS EL ERROR

  PARA QUE EL COCHE CIRCULE BIEN Y HAGA BIEN EL WALLFOLLOWER TENEIS QUE AJUSTAR LOS VALORES DE:
 
  - SPEED
  - Distancia Requerida: setPointDistanceDcha
  - Kp
  - FILTRO2MIN
  - FILTRO2MAX
  - FILTRO3
  - dualRateIzq
  - dualRateDcha

  LA DISTANCIA REQUERIDA: setPointDistanceDCHA AHORA ESTA EN 15 cm
*/

//VARIABLES A CONTROLAR:
const int Speed = 160;//ENTRE 0 Y 255: REDUCIR ESTE VALOR SI QUEREMOS QUE VAYA MÁS DESPACIO
const int setPointDistanceDCHA = 15;//DISTANCIA REQUERIDA PR LA DERECHA (TENEMOS EL SENSOR US EN LA DERECHA)
const int Kp = 1;//AJUSTAR SEGÚN REACCIÓN DEL VEHÍCULO
const int FILTRO1 = 1;//FILTRO PARA LA DISTANCIA MEDIDA
const int FILTRO2MIN = 3;//FILTRO PARA LA DISTANCIA MEDIDA, RANGO INFERIOR
const int FILTRO2MAX = 80;//FILTRO PARA LA DISTANCIA MEDIDA, RANGO SUPERIOR
const int FILTRO3 = 15;// FILTRO PARA EL ERROR
// EL DUAL RATE DEBE SER MAYOR SI LAS CURVAS A TOMAR SON MAS CERRADAS
const int dualRateIzq = 0;// PONER MAS DUAL RATE SI LAS CURVAS SON MÁS CERRADAS
const int dualRateDcha = 180;// PONER MAS DUAL RATE SI LAS CURVAS SON MAS CERRADAS

//COMIENZA EL PROGRAMA:

#include <Servo.h>

Servo steeringServo;
const int rearMotorPinEnable = 6;
const int rearMotorPin1 = 7;
const int rearMotorPin2 = 8;

int servoPosition = 90;
const int centerPosition = 90;

const int disparoPin = 5;
const int ecoPin = 4;
long int durationRight;
int distanceMedidaRight = 0;//DISTANCIA MEDIDA POR LA DERECHA

int error = 0;

void setup() {
  steeringServo.attach(9);
  steeringServo.write(centerPosition);
  pinMode(rearMotorPinEnable, OUTPUT);
  pinMode(rearMotorPin1, OUTPUT);
  pinMode(rearMotorPin2, OUTPUT);
  pinMode(disparoPin, OUTPUT);
  pinMode(ecoPin, INPUT);
  Serial.begin(9600);
}

void mideDistancia ()
{
  digitalWrite(disparoPin, LOW);
  delayMicroseconds(5);
  digitalWrite(disparoPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(disparoPin, LOW);
  durationRight = pulseIn(ecoPin, HIGH);
  distanceMedidaRight = 0.017 * durationRight;

}

void loop() {

  analogWrite(rearMotorPinEnable, Speed);
  digitalWrite(rearMotorPin1, HIGH);
  digitalWrite(rearMotorPin2, LOW);
  mideDistancia();//LA CLAVE ES FILTRAR LOS DATOS DE LOS VALORES DE DISTANCIA OBTENIDOS

  if (distanceMedidaRight > FILTRO1) {//PRIMER FILTRO
    //imprime();
    if ((distanceMedidaRight > FILTRO2MIN) and (distanceMedidaRight < FILTRO2MAX)) { //SEGUNDO FILTRO RANGO MINIMO y MAXIMO
      error = setPointDistanceDCHA - distanceMedidaRight;
      
      if (error > 0) {
        if (error > FILTRO3) {
          error = FILTRO3;
          calculaCERCA();

        } else {
         calculaCERCA();
        }
      } else {
        if (error < -FILTRO3) {
          error = -FILTRO3;
       calculaLEJOS();

        } else {
          calculaLEJOS();
        }

      }
    } else {
      steeringServo.write(centerPosition);
    }
  }
  imprime();
}

void calculaCERCA(){//ERROR POSITIVO
   error = map(error, 0, FILTRO3, 0,90);
   int correccion = Kp * error;
   servoPosition = centerPosition + correccion;
   steeringServo.write(servoPosition);
}

void calculaLEJOS(){//ERROR NEGATIVO
   error = map(error, -FILTRO3, 0, -90,0);
   int correccion = Kp * error;
   servoPosition = centerPosition + correccion;
   steeringServo.write(servoPosition);
}


void imprime() {
  Serial.print("  La distancia a la derecha es: ");
  Serial.println(distanceMedidaRight);
  Serial.print("  La Posición del Servo es: ");
  Serial.println(servoPosition);
  Serial.println("  ");
  delay(150);
}
